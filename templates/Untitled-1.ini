
from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
app.secret_key = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///medical_booking.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# --------------------- Models ---------------------

class District(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    hospitals = db.relationship('Hospital', backref='district', lazy=True)

class Hospital(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    district_id = db.Column(db.Integer, db.ForeignKey('district.id'), nullable=False)
    clinics = db.relationship('Clinic', backref='hospital', lazy=True)
    users = db.relationship('User', backref='hospital', lazy=True)

class Clinic(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    hospital_id = db.Column(db.Integer, db.ForeignKey('hospital.id'), nullable=False)
    doctors = db.relationship('Doctor', backref='clinic', lazy=True)

class Doctor(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    specialty = db.Column(db.String(100), nullable=False)
    clinic_id = db.Column(db.Integer, db.ForeignKey('clinic.id'), nullable=False)
    appointments = db.relationship('Appointment', backref='doctor', lazy=True)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    fullname = db.Column(db.String(200), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    phone = db.Column(db.String(20), unique=True, nullable=False)
    gender = db.Column(db.String(10))
    blood_type = db.Column(db.String(5))
    address = db.Column(db.String(200))
    password_hash = db.Column(db.String(128), nullable=False)  # تخزين هاش كلمة المرور
    role = db.Column(db.String(20), nullable=False, default='patient')  # patient, hospital, admin
    hospital_id = db.Column(db.Integer, db.ForeignKey('hospital.id'))
    appointments = db.relationship('Appointment', backref='user', lazy=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Appointment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    doctor_id = db.Column(db.Integer, db.ForeignKey('doctor.id'), nullable=False)
    date = db.Column(db.DateTime, default=datetime.utcnow)
    status = db.Column(db.String(20), default='pending')  # pending, confirmed, cancelled

# --------------------- Routes ---------------------

# (لا يوجد تغيير في الروتات)

# --------------------- تعديل رووت تسجيل الدخول لتدعم هاش كلمة المرور ---------------------

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        phone = request.form['phone']
        password = request.form['password']
        user = User.query.filter_by(phone=phone).first()
        if user and user.check_password(password):
            session['user_id'] = user.id
            session['role'] = user.role
            if user.role == 'admin':
                return redirect(url_for('admin_dashboard'))
            elif user.role == 'hospital':
                return redirect(url_for('hospital_dashboard'))
            else:
                return redirect(url_for('index'))
        else:
            flash("رقم الهاتف أو كلمة المرور غير صحيحة", "danger")
            return render_template('login.html')
    return render_template('login.html')

# --------------------- تعديل رووت التسجيل لتخزين كلمة المرور مشفرة ---------------------

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        fullname = request.form['fullname']
        email = request.form['email']
        phone = request.form['phone']
        gender = request.form['gender']
        blood_type = request.form['blood_type']
        address = request.form['address']
        password = request.form['password']
        confirm_password = request.form['confirm_password']

        if password != confirm_password:
            flash("كلمتا المرور غير متطابقتين", "danger")
            return render_template('register.html')

        if User.query.filter((User.phone == phone) | (User.email == email)).first():
            flash("رقم الهاتف أو البريد الإلكتروني مستخدم مسبقاً", "danger")
            return render_template('register.html')

        user = User(
            fullname=fullname,
            email=email,
            phone=phone,
            gender=gender,
            blood_type=blood_type,
            address=address,
            role='patient'
        )
        user.set_password(password)
        db.session.add(user)
        db.session.commit()
        flash("تم إنشاء الحساب بنجاح، يرجى تسجيل الدخول", "success")
        return redirect(url_for('login'))

    return render_template('register.html')

# --------------------- تعديل دالة init_db_data ---------------------

def init_db_data():
    db.drop_all()
    db.create_all()

    # إضافة المدير العام (أدمن)
    admin = User(
        fullname="المدير العام",
        email="admin@example.com",
        phone="992008",
        gender="ذكر",
        blood_type="O+",
        address="المدينة الرئيسية",
        role="admin"
    )
    admin.set_password("admin992008")
    db.session.add(admin)

    # إضافة المديريات
    d1 = District(name="مديرية المكلا")
    db.session.add(d1)
    db.session.commit()

    # إضافة المستشفيات (تغيير الأسماء لتكون فريدة)
    h1 = Hospital(name="مستوصف الحياة الخيري", district=d1)
    h2 = Hospital(name="مستشفى الريادة العام 1", district=d1)
    h3 = Hospital(name="مستشفى الريادة العام 2", district=d1)
    h4 = Hospital(name="مستشفى الريادة العام 3", district=d1)
    h5 = Hospital(name="مستشفى الريادة العام 4", district=d1)
    db.session.add_all([h1, h2, h3, h4, h5])
    db.session.commit()

    # إضافة العيادات
    c1 = Clinic(name="عيادة الأسنان", hospital=h1)
    c2 = Clinic(name="عيادة النساء والتوليد", hospital=h1)
    c3 = Clinic(name="عيادة الأطفال", hospital=h2)
    c4 = Clinic(name="عيادة الباطنية", hospital=h3)
    db.session.add_all([c1, c2, c3, c4])
    db.session.commit()

    # إضافة الأطباء
    doc1 = Doctor(name="د. أحمد اليماني", specialty="أسنان", clinic=c1)
    doc2 = Doctor(name="د. ليلى العمري", specialty="نساء وتوليد", clinic=c2)
    doc3 = Doctor(name="د. سامي الشامي", specialty="أطفال", clinic=c3)
    doc4 = Doctor(name="د. مريم الخطيب", specialty="باطنية", clinic=c4)
    db.session.add_all([doc1, doc2, doc3, doc4])
    db.session.commit()

    # إضافة حساب مستشفى (مدير مستشفى) مع تصحيح تعيين hospital_id
    hospital_user = User(
        fullname="مدير مستوصف الحياة الخيري",
        email="hospital1@example.com",
        phone="99887766",
        gender="ذكر",
        blood_type="A+",
        address="المكلا",
        role="hospital",
        hospital_id=h1.id
    )
    hospital_user.set_password("hospitalpass")
    db.session.add(hospital_user)
    db.session.commit()
